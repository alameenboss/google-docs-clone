[
    {
        "id": 1,
        "docId": "dc13fb5d-ee4c-4359-96d5-68b9bdd6258c",
        "documentName": "Google Docs Clone",
        "content": "<h1>\t\t\t\t\t\t<span style=\"color: rgb(255, 255, 255); background-color: rgb(0, 0, 0);\">Google Docs Clone</span></h1><p>This project is a Google Docs clone built with&nbsp;Angular&nbsp;for the frontend,&nbsp;Angular Material Design&nbsp;for the UI components,&nbsp;Quill.js&nbsp;for the rich text editor, and a backend API developed using&nbsp;ASP.NET Core&nbsp;with the repository pattern. The API is documented using&nbsp;Swagger OpenAPI&nbsp;documentation, and&nbsp;Entity Framework Core&nbsp;is used for database access with&nbsp;SQLite&nbsp;as the underlying database engine.</p><h2><br></h2><h2>Features</h2><ul><li>User registration and authentication</li><li>Create, edit, and delete documents</li><li>Collaborative real-time editing</li><li>Rich text formatting using Quill.js</li><li>Document sharing and permissions management</li><li>Revision history and version control</li><li>Search functionality</li></ul><h2><br></h2><h2>Prerequisites</h2><p>Before running the application, make sure you have the following installed:</p><p><br></p><p><br></p><ul><li>Node.js&nbsp;(version X.X.X)</li><li>Angular CLI&nbsp;(version X.X.X)</li><li>.NET Core SDK&nbsp;(version X.X.X)</li><li>SQLite&nbsp;database engine (version X.X.X)</li></ul><h2><br></h2><h2>Installation</h2><ol><li>Clone the repository:</li></ol><pre class=\"ql-syntax\" spellcheck=\"false\">git clone https://github.com/alameenboss/google-docs-clone.git\n</pre><ol><li>Frontend setup:</li></ol><ul><li>Navigate to the&nbsp;<code style=\"background-color: var(--bgColor-neutral-muted, var(--color-neutral-muted));\">frontend</code>&nbsp;directory:</li></ul><pre class=\"ql-syntax\" spellcheck=\"false\">cd google-docs-clone/frontend\n</pre><ul><li>Install dependencies:</li></ul><pre class=\"ql-syntax\" spellcheck=\"false\">npm install\n</pre><ol><li>Backend setup:</li></ol><ul><li>Navigate to the backend directory:</li></ul><pre class=\"ql-syntax\" spellcheck=\"false\">cd ../backend\n</pre><ul><li>Install dependencies:</li></ul><pre class=\"ql-syntax\" spellcheck=\"false\">dotnet restore\n</pre><ol><li>Database setup:</li></ol><ul><li>Open the appsettings.json file in the backend directory.</li><li>Update the ConnectionStrings section to configure the SQLite database path.</li><li>Apply migrations to create the database:</li></ul><pre class=\"ql-syntax\" spellcheck=\"false\">dotnet ef database update\n</pre><h2><br></h2><h2>Usage</h2><ol><li>Start the frontend:</li></ol><ul><li>Navigate to the frontend directory:</li></ul><pre class=\"ql-syntax\" spellcheck=\"false\">cd google-docs-clone/frontend\n</pre><ul><li>Run the development server:</li></ul><pre class=\"ql-syntax\" spellcheck=\"false\">ng serve\n</pre><p>Access the frontend application at&nbsp;<a href=\"http://localhost:4200/\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: var(--fgColor-accent, var(--color-accent-fg)); background-color: transparent;\">http://localhost:4200</a>.</p><p><br></p><p><br></p><ol><li>Start the backend:</li></ol><ul><li>Navigate to the backend directory:</li></ul><pre class=\"ql-syntax\" spellcheck=\"false\">cd google-docs-clone/backend\n</pre><ul><li>Run the API server:</li></ul><pre class=\"ql-syntax\" spellcheck=\"false\">dotnet run\n</pre><p>The API server will be available at&nbsp;<a href=\"http://localhost:5000/\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: var(--fgColor-accent, var(--color-accent-fg)); background-color: transparent;\">http://localhost:5000</a>.</p><p><br></p><p><br></p><ol><li>Access Swagger API documentation: Open your browser and navigate to&nbsp;<a href=\"http://localhost:5000/swagger\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: var(--fgColor-accent, var(--color-accent-fg)); background-color: transparent;\">http://localhost:5000/swagger</a>.</li></ol><h2><br></h2><h2>Contributing</h2><p>Contributions are welcome! If you'd like to contribute to this project, please follow these steps:</p><p><br></p><p><br></p><ul><li>Fork the repository.</li><li>Create a new branch for your feature or bug fix.</li><li>Make your changes and commit them.</li><li>Push your changes to your fork.</li><li>Submit a pull request.</li></ul><h2><br></h2><h2>License</h2><p>This project is licensed under the MIT License.</p>"
    },
    {
        "id": 8,
        "docId": "6120c3e9-3998-43fd-ac04-6b2833ad6313",
        "documentName": "ngx-quill documentations",
        "content": "<h1>ngx-quill&nbsp;<a href=\"https://github.com/KillerCodeMonkey/ngx-quill/workflows/CI/badge.svg\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: var(--fgColor-accent, var(--color-accent-fg)); background-color: var(--bgColor-default, var(--color-canvas-default));\"><img src=\"https://github.com/KillerCodeMonkey/ngx-quill/workflows/CI/badge.svg\" alt=\"Build Status\"></a></h1><p><a href=\"https://cloud.githubusercontent.com/assets/2264672/20601381/a51753d4-b258-11e6-92c2-1d79efa5bede.png\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: var(--fgColor-accent, var(--color-accent-fg)); background-color: var(--bgColor-default, var(--color-canvas-default));\"><img src=\"https://cloud.githubusercontent.com/assets/2264672/20601381/a51753d4-b258-11e6-92c2-1d79efa5bede.png\" width=\"200px\"></a></p><p>ngx-quill is an angular (&gt;=2) module for the&nbsp;<a href=\"https://quilljs.com/\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: var(--fgColor-accent, var(--color-accent-fg)); background-color: transparent;\">Quill Rich Text Editor</a>&nbsp;containing all components you need.</p><h2><br></h2><h2>Donate/Support</h2><p>If you like my work, feel free to support it. Donations to the project are always welcomed :)</p><p>PayPal:&nbsp;<a href=\"http://paypal.me/bengtler\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: var(--fgColor-accent, var(--color-accent-fg)); background-color: transparent;\">PayPal.Me/bengtler</a></p><h2><br></h2><h2>Examples</h2><ul><li><a href=\"https://github.com/killerCodeMonkey/ngx-quill-example\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: var(--fgColor-accent, var(--color-accent-fg)); background-color: transparent;\">Advanced Demo</a></li><li class=\"ql-indent-1\">integration of&nbsp;<a href=\"https://github.com/contentco/quill-emoji\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: var(--fgColor-accent, var(--color-accent-fg)); background-color: transparent;\">quill-emoji</a></li><li class=\"ql-indent-1\">integration of&nbsp;<a href=\"https://github.com/afconsult/quill-mention\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: var(--fgColor-accent, var(--color-accent-fg)); background-color: transparent;\">quill-mention</a></li><li class=\"ql-indent-1\">integration of&nbsp;<a href=\"https://github.com/kensnyder/quill-image-resize-module\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: var(--fgColor-accent, var(--color-accent-fg)); background-color: transparent;\">quill-image-resize</a></li><li class=\"ql-indent-1\">custom word count module</li><li class=\"ql-indent-1\">custom toolbar with custom fonts and formats, toolbar position</li><li class=\"ql-indent-1\">show the differences between sanitizing and not sanitizing your content if your content format is html</li><li class=\"ql-indent-1\">usage of different content formats</li><li class=\"ql-indent-1\">template-driven and reactive forms</li><li class=\"ql-indent-1\">code + syntax highlighting</li><li class=\"ql-indent-1\">formulas</li><li class=\"ql-indent-1\">custom key-bindings, e.g. shift + b for bold</li><li class=\"ql-indent-1\">dynamic styles and placeholder</li><li class=\"ql-indent-1\">toggle readonly</li><li class=\"ql-indent-1\">bubble toolbar</li><li class=\"ql-indent-1\">activate formats after editor initialisation, e.g. rtl direction</li><li class=\"ql-indent-1\">present quilljs content with the&nbsp;<code style=\"background-color: var(--bgColor-neutral-muted, var(--color-neutral-muted));\">quill-view</code>&nbsp;and&nbsp;<code style=\"background-color: var(--bgColor-neutral-muted, var(--color-neutral-muted));\">quill-view-html</code>&nbsp;component</li><li><a href=\"https://github.com/KillerCodeMonkey/ngx-quill-ionic\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: var(--fgColor-accent, var(--color-accent-fg)); background-color: transparent;\">Ionic Demo</a></li><li><a href=\"https://github.com/KillerCodeMonkey/ngx-quill-universal-example\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: var(--fgColor-accent, var(--color-accent-fg)); background-color: transparent;\">Angular Universal</a></li></ul><h2><br></h2><h2>Compatibility to Angular Versions</h2><p>Angularngx-quillsupportedv16&gt;= 22.0.0until Dec, 2024v15&gt;= 20.0.0 &lt;= 22.0.0until May, 2024v14&gt;= 17.0.0 &lt; 20until Dec, 2023</p><h2><br></h2><h2>Installation</h2><ul><li><code style=\"background-color: var(--bgColor-neutral-muted, var(--color-neutral-muted));\">npm install ngx-quill</code></li><li>for projects using Angular &lt; v5.0.0 install&nbsp;<code style=\"background-color: var(--bgColor-neutral-muted, var(--color-neutral-muted));\">npm install ngx-quill@1.6.0</code></li><li>install&nbsp;<code style=\"background-color: var(--bgColor-neutral-muted, var(--color-neutral-muted));\">@angular/core</code>,&nbsp;<code style=\"background-color: var(--bgColor-neutral-muted, var(--color-neutral-muted));\">@angular/common</code>,&nbsp;<code style=\"background-color: var(--bgColor-neutral-muted, var(--color-neutral-muted));\">@angular/forms</code>,&nbsp;<code style=\"background-color: var(--bgColor-neutral-muted, var(--color-neutral-muted));\">@angular/platform-browser</code>,&nbsp;<code style=\"background-color: var(--bgColor-neutral-muted, var(--color-neutral-muted));\">quill</code>&nbsp;v1.x,&nbsp;<code style=\"background-color: var(--bgColor-neutral-muted, var(--color-neutral-muted));\">@types/quill</code>&nbsp;v1.x and&nbsp;<code style=\"background-color: var(--bgColor-neutral-muted, var(--color-neutral-muted));\">rxjs</code>&nbsp;- peer dependencies of ngx-quill</li><li>include theme styling:&nbsp;bubble.css or snow.css of quilljs&nbsp;in your index.html (you can find them in&nbsp;<code style=\"background-color: var(--bgColor-neutral-muted, var(--color-neutral-muted));\">node_modules/quill/dist</code>), or add them in your css/scss files with&nbsp;<code style=\"background-color: var(--bgColor-neutral-muted, var(--color-neutral-muted));\">@import</code>&nbsp;statements, or add them external stylings in your build process.</li><li class=\"ql-indent-1\">Example at the beginning of your style.(s)css:</li></ul><pre class=\"ql-syntax\" spellcheck=\"false\"> @import '~quill/dist/quill.bubble.css'; \n // or\n @import '~quill/dist/quill.snow.css';\n</pre><h3><br></h3><h3>For standard webpack, angular-cli and tsc builds</h3><ul><li>import&nbsp;<code style=\"background-color: var(--bgColor-neutral-muted, var(--color-neutral-muted));\">QuillModule</code>&nbsp;from&nbsp;<code style=\"background-color: var(--bgColor-neutral-muted, var(--color-neutral-muted));\">ngx-quill</code>:</li></ul><pre class=\"ql-syntax\" spellcheck=\"false\">import { QuillModule } from 'ngx-quill'\n</pre><ul><li>add&nbsp;<code style=\"background-color: var(--bgColor-neutral-muted, var(--color-neutral-muted));\">QuillModule</code>&nbsp;to the imports of your NgModule:</li></ul><pre class=\"ql-syntax\" spellcheck=\"false\">@NgModule({\n  imports: [\n    ...,\n\n    QuillModule.forRoot()\n  ],\n  ...\n})\nclass YourModule { ... }\n</pre><ul><li>use&nbsp;<code style=\"background-color: var(--bgColor-neutral-muted, var(--color-neutral-muted));\">&lt;quill-editor&gt;&lt;/quill-editor&gt;</code>&nbsp;in your templates to add a default quill editor</li><li>do not forget to include quill + theme css in your buildprocess, module or index.html!</li><li>for builds with angular-cli &gt;=6 only add quilljs to your scripts or scripts section of angular.json, if you need it as a global :)!</li></ul><p>HINT:&nbsp;<em>If you are using lazy loading modules, you have to add&nbsp;</em><code style=\"background-color: var(--bgColor-neutral-muted, var(--color-neutral-muted));\"><em>QuillModule.forRoot()</em></code><em>&nbsp;to your imports in your root module to make sure the&nbsp;</em><code style=\"background-color: var(--bgColor-neutral-muted, var(--color-neutral-muted));\"><em>Config</em></code><em>&nbsp;services is registered.</em></p><h2><br></h2><h2>Angular Universal</h2><h3><br></h3><h3>ngx-quill &gt;= v10</h3><p>Nothing to do here :)</p><h2><br></h2><h2>Global Config</h2><p>It's possible to set custom default modules and Quill config options with the import of the&nbsp;<code style=\"background-color: var(--bgColor-neutral-muted, var(--color-neutral-muted));\">QuillConfigModule</code>&nbsp;from the&nbsp;<code style=\"background-color: var(--bgColor-neutral-muted, var(--color-neutral-muted));\">ngx-quill/config</code>. This module provides a global config, but eliminates the need to import the&nbsp;<code style=\"background-color: var(--bgColor-neutral-muted, var(--color-neutral-muted));\">ngx-quill</code>&nbsp;library into the vendor bundle:</p><pre class=\"ql-syntax\" spellcheck=\"false\">import { QuillConfigModule } from 'ngx-quill/config';\n\n@NgModule({\n  imports: [\n    ...,\n\n    QuillConfigModule.forRoot({\n      modules: {\n        syntax: true,\n        toolbar: [...]\n      }\n    })\n  ],\n  ...\n})\nclass AppModule {}\n</pre><p>Registering the global configuration can be also done using the standalone function if you are bootstrapping an Angular application using standalone features:</p><pre class=\"ql-syntax\" spellcheck=\"false\">import { provideQuillConfig } from 'ngx-quill/config';\n\nbootstrapApplication(AppComponent, {\n  providers: [\n    provideQuillConfig({\n      modules: {\n        syntax: true,\n        toolbar: [...]\n      }\n    })\n  ]\n})\n</pre><p>If you want to use the&nbsp;<code style=\"background-color: var(--bgColor-neutral-muted, var(--color-neutral-muted));\">syntax</code>&nbsp;module follow the&nbsp;<a href=\"https://quilljs.com/docs/modules/syntax/#syntax-highlighter-module\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: var(--fgColor-accent, var(--color-accent-fg)); background-color: transparent;\">Syntax Highlight Module Guide</a>.</p><p>See&nbsp;<a href=\"https://quilljs.com/docs/configuration/\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: var(--fgColor-accent, var(--color-accent-fg)); background-color: transparent;\">Quill Configuration</a>&nbsp;for a full list of config options.</p><p>The&nbsp;<code style=\"background-color: var(--bgColor-neutral-muted, var(--color-neutral-muted));\">QuillModule</code>&nbsp;exports the&nbsp;<code style=\"background-color: var(--bgColor-neutral-muted, var(--color-neutral-muted));\">defaultModules</code>&nbsp;if you want to extend them :).</p><h3><br></h3><h3>Custom Modules and options/formats</h3><ul><li>use customOptions for adding for example custom font sizes or other options/formats</li><li>use customModules for adding and overwriting modules, e.g. image-resize or your own modules</li></ul><h3><br></h3><h3>Suppress global register warnings</h3><p>Per default when&nbsp;<code style=\"background-color: var(--bgColor-neutral-muted, var(--color-neutral-muted));\">Quill.register</code>&nbsp;is called and you are overwriting an already existing module, QuillJS logs a warning. If you pass&nbsp;<code style=\"background-color: var(--bgColor-neutral-muted, var(--color-neutral-muted));\">customOptions</code>&nbsp;or&nbsp;<code style=\"background-color: var(--bgColor-neutral-muted, var(--color-neutral-muted));\">customModules</code>&nbsp;ngx-quill is registering those modules/options/formats for you.</p><p>In e.g. an angular univeral project your&nbsp;<code style=\"background-color: var(--bgColor-neutral-muted, var(--color-neutral-muted));\">AppModule</code>&nbsp;and so&nbsp;<code style=\"background-color: var(--bgColor-neutral-muted, var(--color-neutral-muted));\">QuillModule.forRoot()</code>&nbsp;is executed twice (1x server side, 1x browser). QuillJS is running in a mocked env on server side, so it is intendet that every register runs twice.</p><p>To subpress those expected warnings you can turn them off by passing&nbsp;<code style=\"background-color: var(--bgColor-neutral-muted, var(--color-neutral-muted));\">suppressGlobalRegisterWarning: true</code>.</p><h2><br></h2><h2>QuillEditorComponent</h2><h3><br></h3><h3>Hint</h3><p>Ngx-quill updates the ngModel or formControl for every&nbsp;<code style=\"background-color: var(--bgColor-neutral-muted, var(--color-neutral-muted));\">user</code>&nbsp;change in the editor. Checkout the&nbsp;<a href=\"https://quilljs.com/docs/api/#events\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: var(--fgColor-accent, var(--color-accent-fg)); background-color: transparent;\">QuillJS Source</a>&nbsp;parameter of the&nbsp;<code style=\"background-color: var(--bgColor-neutral-muted, var(--color-neutral-muted));\">text-change</code>&nbsp;event.</p><p>If you are using the editor reference to directly manipulate the editor content and want to update the model, pass&nbsp;<code style=\"background-color: var(--bgColor-neutral-muted, var(--color-neutral-muted));\">'user'</code>&nbsp;as the source parameter to the QuillJS api methods.</p><h3><br></h3><h3>Config</h3><ul><li>ngModel - set initial value or allow two-way databinding for template driven forms</li><li>formControl/formControlName - set initial value or allow two-way databinding for reactive forms</li><li>readOnly (true | false) if user can edit content</li><li>formats - array of allowed formats/groupings</li><li>format - model format - default:&nbsp;<code style=\"background-color: var(--bgColor-neutral-muted, var(--color-neutral-muted));\">html</code>, values:&nbsp;<code style=\"background-color: var(--bgColor-neutral-muted, var(--color-neutral-muted));\">html | object | text | json</code>, sets the model value type - html = html string, object = quill operation object, json = quill operation json, text = plain text</li><li>modules - configure/disable quill modules, e.g toolbar or add custom toolbar via html element default is</li></ul><pre class=\"ql-syntax\" spellcheck=\"false\">const modules = {\n  toolbar: [\n    ['bold', 'italic', 'underline', 'strike'],        // toggled buttons\n    ['blockquote', 'code-block'],\n\n    [{ 'header': 1 }, { 'header': 2 }],               // custom button values\n    [{ 'list': 'ordered'}, { 'list': 'bullet' }],\n    [{ 'script': 'sub'}, { 'script': 'super' }],      // superscript/subscript\n    [{ 'indent': '-1'}, { 'indent': '+1' }],          // outdent/indent\n    [{ 'direction': 'rtl' }],                         // text direction\n\n    [{ 'size': ['small', false, 'large', 'huge'] }],  // custom dropdown\n    [{ 'header': [1, 2, 3, 4, 5, 6, false] }],\n\n    [{ 'color': [] }, { 'background': [] }],          // dropdown with defaults from theme\n    [{ 'font': [] }],\n    [{ 'align': [] }],\n\n    ['clean'],                                         // remove formatting button\n\n    ['link', 'image', 'video']                         // link and image, video\n  ]\n};\n</pre><ul><li>theme - bubble/snow, default is&nbsp;<code style=\"background-color: var(--bgColor-neutral-muted, var(--color-neutral-muted));\">snow</code></li><li>sanitize - uses angulars DomSanitizer to sanitize html values - default:&nbsp;<code style=\"background-color: var(--bgColor-neutral-muted, var(--color-neutral-muted));\">false</code>, boolean (only for format=\"html\")</li><li>styles - set a styles object, e.g.&nbsp;<code style=\"background-color: var(--bgColor-neutral-muted, var(--color-neutral-muted));\">[styles]=\"{height: '250px'}\"</code></li><li>placeholder - placeholder text, default is&nbsp;<code style=\"background-color: var(--bgColor-neutral-muted, var(--color-neutral-muted));\">Insert text here ...</code></li><li>bounds - boundary of the editor, default&nbsp;<code style=\"background-color: var(--bgColor-neutral-muted, var(--color-neutral-muted));\">document.body</code>, pass 'self' to attach the editor element</li><li>maxLength - add validation for maxlength - set model state to&nbsp;<code style=\"background-color: var(--bgColor-neutral-muted, var(--color-neutral-muted));\">invalid</code>&nbsp;and add&nbsp;<code style=\"background-color: var(--bgColor-neutral-muted, var(--color-neutral-muted));\">ng-invalid</code>&nbsp;class</li><li>minLength - add validation for minlength - set model state to&nbsp;<code style=\"background-color: var(--bgColor-neutral-muted, var(--color-neutral-muted));\">invalid</code>&nbsp;and add&nbsp;<code style=\"background-color: var(--bgColor-neutral-muted, var(--color-neutral-muted));\">ng-invalid</code>&nbsp;class, only set invalid if editor text not empty --&gt; if you want to check if text is required --&gt; use the required attribute</li><li>trimOnValidation - trim trailing|leading newlines on validation run for required, min- and maxLength, default&nbsp;<code style=\"background-color: var(--bgColor-neutral-muted, var(--color-neutral-muted));\">false</code></li><li>required - add validation as a required field -&nbsp;<code style=\"background-color: var(--bgColor-neutral-muted, var(--color-neutral-muted));\">[required]=\"true\"</code>&nbsp;- default: false, boolean expected (no strings!)</li><li>strict - default: true, sets editor in strict mode</li><li>scrollingContainer - default '.ql-editor', allows to set scrolling container</li><li>beforeRender - a function, which is executed before the Quill editor is rendered, this might be useful for lazy-loading CSS. Given the following example:</li></ul><pre class=\"ql-syntax\" spellcheck=\"false\">// typings.d.ts\ndeclare module '!!raw-loader!*.css' {\n  const css: string;\n  export default css;\n}\n\n// my.component.ts\nconst quillCSS$ = defer(() =&gt;\n  import('!!raw-loader!quill/dist/quill.core.css').then((m) =&gt; {\n    const style = document.createElement('style');\n    style.innerHTML = m.default;\n    document.head.appendChild(style);\n  })\n).pipe(shareReplay({ bufferSize: 1, refCount: true }));\n\n@Component({\n  template: '&lt;quill-editor [beforeRender]=\"beforeRender\"&gt;&lt;/quill-editor&gt;',\n})\nexport class MyComponent {\n  beforeRender = () =&gt; firstValueFrom(quillCSS$);\n}\n</pre><ul><li>use customOptions for adding for example custom font sizes - array of objects&nbsp;<code style=\"background-color: var(--bgColor-neutral-muted, var(--color-neutral-muted));\">{ import: string; whitelist: any[] }</code>&nbsp;--&gt; this overwrites this options&nbsp;globally&nbsp;!!!</li></ul><pre class=\"ql-syntax\" spellcheck=\"false\">// Example with registering custom fonts\ncustomOptions: [{\n  import: 'formats/font',\n  whitelist: ['mirza', 'roboto', 'aref', 'serif', 'sansserif', 'monospace']\n}]\n</pre><ul><li>use customModules for adding and overwriting modules - an array of objects&nbsp;<code style=\"background-color: var(--bgColor-neutral-muted, var(--color-neutral-muted));\">{ implementation: any; path: string }</code>&nbsp;--&gt; this overwrites this modules&nbsp;globally&nbsp;!!!</li></ul><pre class=\"ql-syntax\" spellcheck=\"false\">// The `implementation` may be a custom module constructor or an Observable that resolves to\n// a custom module constructor (in case you'd want to load your custom module lazily).\n// For instance, these options are applicable:\n// import BlotFormatter from 'quill-blot-formatter';\ncustomModules = [\n  { path: 'modules/blotFormatter', implementation: BlotFormatter }\n]\n// Or:\nconst BlotFormatter$ = defer(() =&gt; import('quill-blot-formatter').then(m =&gt; m.default))\ncustomModules = [\n  { path: 'modules/blotFormatter', implementation: BlotFormatter$ }\n]\n</pre><ul><li>checkout the demo repo about usage of&nbsp;<code style=\"background-color: var(--bgColor-neutral-muted, var(--color-neutral-muted));\">customOptions</code>&nbsp;and&nbsp;<code style=\"background-color: var(--bgColor-neutral-muted, var(--color-neutral-muted));\">customModules</code>&nbsp;<a href=\"https://github.com/KillerCodeMonkey/ngx-quill-example/blob/2e72dc75e6d9b423f67b57b17cc8fb527dd694e4/src/app/app.module.ts#L67\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: var(--fgColor-accent, var(--color-accent-fg)); background-color: transparent;\">Demo Repo</a></li><li>possibility to create a custom toolbar via projection slot&nbsp;<code style=\"background-color: var(--bgColor-neutral-muted, var(--color-neutral-muted));\">[quill-editor-toolbar]</code>:</li></ul><p>Try to not use much angular magic here, like&nbsp;<code style=\"background-color: var(--bgColor-neutral-muted, var(--color-neutral-muted));\">(output)</code>&nbsp;listeners. Use native EventListeners</p><pre class=\"ql-syntax\" spellcheck=\"false\">&lt;quill-editor&gt;\n  &lt;div quill-editor-toolbar&gt;\n    &lt;span class=\"ql-formats\"&gt;\n      &lt;button class=\"ql-bold\" [title]=\"'Bold'\"&gt;&lt;/button&gt;\n    &lt;/span&gt;\n    &lt;span class=\"ql-formats\"&gt;\n      &lt;select class=\"ql-align\" [title]=\"'Aligment'\"&gt;\n        &lt;option selected&gt;&lt;/option&gt;\n        &lt;option value=\"center\"&gt;&lt;/option&gt;\n        &lt;option value=\"right\"&gt;&lt;/option&gt;\n        &lt;option value=\"justify\"&gt;&lt;/option&gt;\n      &lt;/select&gt;\n      &lt;select class=\"ql-align\" [title]=\"'Aligment2'\"&gt;\n        &lt;option selected&gt;&lt;/option&gt;\n        &lt;option value=\"center\"&gt;&lt;/option&gt;\n        &lt;option value=\"right\"&gt;&lt;/option&gt;\n        &lt;option value=\"justify\"&gt;&lt;/option&gt;\n      &lt;/select&gt;\n    &lt;/span&gt;\n  &lt;/div&gt;\n&lt;/quill-editor&gt;\n</pre><ul><li>customToolbarPosition - if you are working with a custom toolbar you can switch the position :). - default:&nbsp;<code style=\"background-color: var(--bgColor-neutral-muted, var(--color-neutral-muted));\">top</code>, possible values&nbsp;<code style=\"background-color: var(--bgColor-neutral-muted, var(--color-neutral-muted));\">top</code>,&nbsp;<code style=\"background-color: var(--bgColor-neutral-muted, var(--color-neutral-muted));\">bottom</code></li><li>debug - set log level&nbsp;<code style=\"background-color: var(--bgColor-neutral-muted, var(--color-neutral-muted));\">warn</code>,&nbsp;<code style=\"background-color: var(--bgColor-neutral-muted, var(--color-neutral-muted));\">error</code>,&nbsp;<code style=\"background-color: var(--bgColor-neutral-muted, var(--color-neutral-muted));\">log</code>&nbsp;or&nbsp;<code style=\"background-color: var(--bgColor-neutral-muted, var(--color-neutral-muted));\">false</code>&nbsp;to deactivate logging, default:&nbsp;<code style=\"background-color: var(--bgColor-neutral-muted, var(--color-neutral-muted));\">warn</code></li><li>trackChanges - check if only&nbsp;<code style=\"background-color: var(--bgColor-neutral-muted, var(--color-neutral-muted));\">user</code>&nbsp;(quill source user) or&nbsp;<code style=\"background-color: var(--bgColor-neutral-muted, var(--color-neutral-muted));\">all</code>&nbsp;change should be trigger model update, default&nbsp;<code style=\"background-color: var(--bgColor-neutral-muted, var(--color-neutral-muted));\">user</code>. Using&nbsp;<code style=\"background-color: var(--bgColor-neutral-muted, var(--color-neutral-muted));\">all</code>&nbsp;is not recommended, it cause some unexpected sideeffects.</li><li>preserveWhitespace - default: false - possibility to use a pre-tag instead of a div-tag for the contenteditable area to preserve duplicated whitespaces | caution if used with syntax plugin&nbsp;<a href=\"https://github.com/quilljs/quill/issues/1751\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: var(--fgColor-accent, var(--color-accent-fg)); background-color: transparent;\">Related issue</a></li><li>classes - a space separated list of CSS classes that will be added onto the editor element</li><li>linkPlaceholder - optional - set placeholder for the link tooltip</li><li>debounceTime - optional - debounces&nbsp;<code style=\"background-color: var(--bgColor-neutral-muted, var(--color-neutral-muted));\">onContentChanged</code>,&nbsp;<code style=\"background-color: var(--bgColor-neutral-muted, var(--color-neutral-muted));\">onEditorChanged</code>,&nbsp;<code style=\"background-color: var(--bgColor-neutral-muted, var(--color-neutral-muted));\">ngModel</code>&nbsp;and form control value changes. Improves performance (especially when working with large, &gt;2-3 MiB Deltas), as neither&nbsp;<code style=\"background-color: var(--bgColor-neutral-muted, var(--color-neutral-muted));\">editorChangeHandler</code>, nor&nbsp;<code style=\"background-color: var(--bgColor-neutral-muted, var(--color-neutral-muted));\">textChangeHandler</code>&nbsp;handler runs internally.</li><li>defaultEmptyValue - optional - change the default value for an empty editor. Currently it is&nbsp;<code style=\"background-color: var(--bgColor-neutral-muted, var(--color-neutral-muted));\">null</code>, but you can set it e.g. to empty string</li></ul><p><a href=\"https://github.com/quilljs/quill/blob/f75ff2973f068c3db44f949915eb8a74faf162a8/docs/_includes/full-toolbar.html\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: var(--fgColor-accent, var(--color-accent-fg)); background-color: transparent;\">Full Quill Toolbar HTML</a></p><h3><br></h3><h3>Outputs</h3><ul><li>onEditorCreated - editor instance</li><li>Use this output to get the editor instance and use it directly. After this output has called the component is stable and all listeners are binded</li></ul><pre class=\"ql-syntax\" spellcheck=\"false\">editor // Quill\n</pre><ul><li>onContentChanged - text is updated</li></ul><pre class=\"ql-syntax\" spellcheck=\"false\">{\n  editor: editorInstance, // Quill\n  html: html, // html string\n  text: text, // plain text string\n  content: content, // Content - operatins representation\n  delta: delta, // Delta\n  oldDelta: oldDelta, // Delta\n  source: source // ('user', 'api', 'silent' , undefined)\n}\n</pre><ul><li>onSelectionChanged - selection is updated, also triggered for onBlur and onFocus, because the selection changed</li></ul><pre class=\"ql-syntax\" spellcheck=\"false\">{\n  editor: editorInstance, // Quill\n  range: range, // Range\n  oldRange: oldRange, // Range\n  source: source // ('user', 'api', 'silent' , undefined)\n}\n</pre><ul><li>onEditorChanged - text or selection is updated - independent of the source</li></ul><pre class=\"ql-syntax\" spellcheck=\"false\">{\n  editor: editorInstance, // Quill\n  event: 'text-change' // event type\n  html: html, // html string\n  text: text, // plain text string\n  content: content, // Content - operatins representation\n  delta: delta, // Delta\n  oldDelta: oldDelta, // Delta\n  source: source // ('user', 'api', 'silent' , undefined)\n}\n</pre><p>or</p><pre class=\"ql-syntax\" spellcheck=\"false\">{\n  editor: editorInstance, // Quill\n  event: 'selection-change' // event type\n  range: range, // Range\n  oldRange: oldRange, // Range\n  source: source // ('user', 'api', 'silent' , undefined)\n}\n</pre><ul><li>onFocus - editor is focused</li></ul><pre class=\"ql-syntax\" spellcheck=\"false\">{\n  editor: editorInstance, // Quill\n  source: source // ('user', 'api', 'silent' , undefined)\n}\n</pre><ul><li>onBlur - editor is blured</li></ul><pre class=\"ql-syntax\" spellcheck=\"false\">{\n  editor: editorInstance, // Quill\n  source: source // ('user', 'api', 'silent' , undefined)\n}\n</pre><h2><br></h2><h2>QuillViewComponent, QuillViewHTMLComponent &amp; How to present the editor content</h2><p>In most cases a wysiwyg editor is used in backoffice to store the content to the database. On the other side this value should be used, to show the content to the enduser.</p><p>In most cases the&nbsp;<code style=\"background-color: var(--bgColor-neutral-muted, var(--color-neutral-muted));\">html</code>&nbsp;format is used, but it is not recommended by QuillJS, because it has the intention to be a solid, easy to maintain editor. Because of that it uses blots and object representations of the content and operation.</p><p>This content object is easy to store and to maintain, because there is no html syntax parsing necessary. So you even switching to another editor is very easy when you can work with that.</p><p><code style=\"background-color: var(--bgColor-neutral-muted, var(--color-neutral-muted));\">ngx-quill</code>&nbsp;provides some helper components, to present quilljs content.</p><h3><br></h3><h3>QuillViewComponent - Using QuillJS to render content</h3><p>In general QuillJS recommends to use a QuillJS instance to present your content. Just create a quill editor without a toolbar and in readonly mode. With some simple css lines you can remove the default border around the content.</p><p>As a helper&nbsp;<code style=\"background-color: var(--bgColor-neutral-muted, var(--color-neutral-muted));\">ngx-quill</code>&nbsp;provides a component where you can pass many options of the&nbsp;<code style=\"background-color: var(--bgColor-neutral-muted, var(--color-neutral-muted));\">quill-editor</code>&nbsp;like modules, format, formats, customOptions, but renders only the content as readonly and without a toolbar. Import is the&nbsp;<code style=\"background-color: var(--bgColor-neutral-muted, var(--color-neutral-muted));\">content</code>&nbsp;input, where you can pass the editor content you want to present.</p><h4><br></h4><h4>Config</h4><ul><li>content - the content to be presented</li><li>formats - array of allowed formats/groupings</li><li>format - model format - default:&nbsp;<code style=\"background-color: var(--bgColor-neutral-muted, var(--color-neutral-muted));\">html</code>, values:&nbsp;<code style=\"background-color: var(--bgColor-neutral-muted, var(--color-neutral-muted));\">html | object | text | json</code>, sets the model value type - html = html string, object = quill operation object, json = quill operation json, text = plain text</li><li>modules - configure/disable quill modules</li><li>theme - bubble/snow, default is&nbsp;<code style=\"background-color: var(--bgColor-neutral-muted, var(--color-neutral-muted));\">snow</code></li><li>debug - set log level&nbsp;<code style=\"background-color: var(--bgColor-neutral-muted, var(--color-neutral-muted));\">warn</code>,&nbsp;<code style=\"background-color: var(--bgColor-neutral-muted, var(--color-neutral-muted));\">error</code>,&nbsp;<code style=\"background-color: var(--bgColor-neutral-muted, var(--color-neutral-muted));\">log</code>&nbsp;or&nbsp;<code style=\"background-color: var(--bgColor-neutral-muted, var(--color-neutral-muted));\">false</code>&nbsp;to deactivate logging, default:&nbsp;<code style=\"background-color: var(--bgColor-neutral-muted, var(--color-neutral-muted));\">warn</code></li><li>use customOptions for adding for example custom font sizes --&gt; this overwrites this options&nbsp;globally&nbsp;!!!</li><li>use customModules for adding and overwriting modules --&gt; this overwrites this modules&nbsp;globally&nbsp;!!!</li><li>strict - default: true, sets editor in strict mode</li><li>preserveWhitespace - default: false - possibility to use a pre-tag instead of a div-tag for the contenteditable area to preserve duplicated whitespaces | caution if used with syntax plugin&nbsp;<a href=\"https://github.com/quilljs/quill/issues/1751\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: var(--fgColor-accent, var(--color-accent-fg)); background-color: transparent;\">Related issue</a></li><li>sanitize - uses angulars DomSanitizer to sanitize html values - default:&nbsp;<code style=\"background-color: var(--bgColor-neutral-muted, var(--color-neutral-muted));\">false</code>, boolean (only for format=\"html\")</li></ul><h3><br></h3><h3>Outputs</h3><ul><li>onEditorCreated - editor instance</li></ul><pre class=\"ql-syntax\" spellcheck=\"false\">&lt;quill-view [content]=\"content\" format=\"text\" theme=\"snow\"&gt;&lt;/quill-view&gt;\n</pre><h3><br></h3><h3>QuillViewHTMLComponent - Using angular [innerHTML]</h3><p>Most of you will use the&nbsp;<code style=\"background-color: var(--bgColor-neutral-muted, var(--color-neutral-muted));\">html</code>&nbsp;format (even it is not recommended). To render custom html with angular you should use the&nbsp;<code style=\"background-color: var(--bgColor-neutral-muted, var(--color-neutral-muted));\">[innerHTML]</code>&nbsp;attribute.</p><p>But there are some pitfalls:</p><ol><li>You need to have the quill css files loaded, when using classes and not inline styling (<a href=\"https://quilljs.com/guides/how-to-customize-quill/#class-vs-inline\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: var(--fgColor-accent, var(--color-accent-fg)); background-color: transparent;\">https://quilljs.com/guides/how-to-customize-quill/#class-vs-inline</a>)</li><li>When using classes use a&nbsp;<code style=\"background-color: var(--bgColor-neutral-muted, var(--color-neutral-muted));\">div</code>-tag that has the&nbsp;<code style=\"background-color: var(--bgColor-neutral-muted, var(--color-neutral-muted));\">innerHTML</code>&nbsp;attribute and add the&nbsp;<code style=\"background-color: var(--bgColor-neutral-muted, var(--color-neutral-muted));\">ql-editor</code>&nbsp;class. Wrap your div in another&nbsp;<code style=\"background-color: var(--bgColor-neutral-muted, var(--color-neutral-muted));\">div</code>-tag with css classes&nbsp;<code style=\"background-color: var(--bgColor-neutral-muted, var(--color-neutral-muted));\">ql-container</code>&nbsp;and your theme, e.g.&nbsp;<code style=\"background-color: var(--bgColor-neutral-muted, var(--color-neutral-muted));\">ql-snow</code>.:</li></ol><pre class=\"ql-syntax\" spellcheck=\"false\">&lt;div class=\"ql-container ql-snow\" style=\"border-width: 0;\"&gt;\n  &lt;div class=\"ql-editor\" [innerHTML]=\"byPassedHTMLString\"&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</pre><ol><li>Angular has html sanitation, so it will strip unkown or not trusted parts of your HTML - just mark your html as trusted (<a href=\"https://angular.io/api/platform-browser/DomSanitizer\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: var(--fgColor-accent, var(--color-accent-fg)); background-color: transparent;\">DomSanitizer</a>)</li></ol><p>After that your content should look like what you expected.</p><p>If you store html in your database, checkout your backend code, sometimes backends are stripping unwanted tags as well ;).</p><p>As a helper&nbsp;<code style=\"background-color: var(--bgColor-neutral-muted, var(--color-neutral-muted));\">ngx-quill</code>&nbsp;provides a component where you can simply pass your html string and the component does everything for you to render it:</p><ul><li>add necessary css classes</li><li>bypass html sanitation</li></ul><pre class=\"ql-syntax\" spellcheck=\"false\">&lt;quill-view-html [content]=\"htmlstring\" theme=\"snow\"&gt;&lt;/quill-view-html&gt;\n</pre><h4><br></h4><h4>Config</h4><ul><li>content - html string to be presented</li><li>theme - bubble/snow, default is&nbsp;<code style=\"background-color: var(--bgColor-neutral-muted, var(--color-neutral-muted));\">snow</code></li><li>sanitize - default:&nbsp;<code style=\"background-color: var(--bgColor-neutral-muted, var(--color-neutral-muted));\">false</code>, boolean (uses&nbsp;<a href=\"https://angular.io/api/platform-browser/DomSanitizer#bypasssecuritytrusthtml\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: var(--fgColor-accent, var(--color-accent-fg)); background-color: transparent;\">DomSanitizer</a>&nbsp;to bypass angular html sanitation when set to false)</li></ul><h2><br></h2><h2>Security Hint</h2><p>Angular templates provide some assurance against XSS in the form of client side sanitizing of all inputs&nbsp;<a href=\"https://angular.io/guide/security#xss\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: var(--fgColor-accent, var(--color-accent-fg)); background-color: transparent;\">https://angular.io/guide/security#xss</a>.</p><p>Ngx-quill components provide the input paramter&nbsp;<code style=\"background-color: var(--bgColor-neutral-muted, var(--color-neutral-muted));\">sanitize</code>&nbsp;to sanitize html-strings passed as&nbsp;<code style=\"background-color: var(--bgColor-neutral-muted, var(--color-neutral-muted));\">ngModel</code>&nbsp;or&nbsp;<code style=\"background-color: var(--bgColor-neutral-muted, var(--color-neutral-muted));\">formControl</code>&nbsp;to the component.</p><p>It is&nbsp;deactivated per default&nbsp;to avoid stripping content or styling, which is not expected.</p><p>But it is&nbsp;recommended&nbsp;to activate this option, if you are working with html strings as model values.</p>"
    },
    {
        "id": 9,
        "docId": "20dbb71f-430c-4dff-8e25-b07e73719fed",
        "documentName": "Hello World",
        "content": "<h1><span style=\"color: rgb(230, 0, 0); background-color: rgb(255, 255, 0);\">Hello World</span></h1>"
    },
    {
        "id": 16,
        "docId": "e139b97f-4f5a-4042-a011-4520e85695f9",
        "documentName": "CSS Variables - The ",
        "content": "<h1>CSS Variables - The var() Function</h1><p><br></p><h2>CSS Variables</h2><p>The&nbsp;<code style=\"color: crimson; background-color: rgba(222, 222, 222, 0.3);\">var()</code>&nbsp;function is used to insert the value of a CSS variable.</p><p>CSS variables have access to the DOM, which means that you can create variables with local or global scope, change the variables with JavaScript, and change the variables based on media queries.</p><p>A good way to use CSS variables is when it comes to the colors of your design. Instead of copy and paste the same colors over and over again, you can place them in variables.</p><h2>The Traditional Way</h2><p>The following example shows the traditional way of defining some colors in a style sheet (by defining the colors to use, for each specific element):</p><h3>Example</h3><p><span style=\"color: brown;\">body&nbsp;</span><span style=\"color: black;\">{</span><span style=\"color: red;\">&nbsp;background-color</span><span style=\"color: black;\">:</span><span style=\"color: mediumblue;\">&nbsp;#1e90ff</span><span style=\"color: black;\">;</span><span style=\"color: red;\">&nbsp;</span><span style=\"color: black;\">}</span></p><p><br></p><p><span style=\"color: brown;\">h2&nbsp;</span><span style=\"color: black;\">{</span><span style=\"color: red;\">&nbsp;border-bottom</span><span style=\"color: black;\">:</span><span style=\"color: mediumblue;\">&nbsp;2px solid #1e90ff</span><span style=\"color: black;\">;</span><span style=\"color: red;\">&nbsp;</span><span style=\"color: black;\">}</span></p><p><br></p><p><span style=\"color: brown;\">.container&nbsp;</span><span style=\"color: black;\">{</span></p><p><span style=\"color: red;\">&nbsp;color</span><span style=\"color: black;\">:</span><span style=\"color: mediumblue;\">&nbsp;#1e90ff</span><span style=\"color: black;\">;</span></p><p><span style=\"color: red;\">&nbsp;background-color</span><span style=\"color: black;\">:</span><span style=\"color: mediumblue;\">&nbsp;#ffffff</span><span style=\"color: black;\">;</span></p><p><span style=\"color: red;\">&nbsp;padding</span><span style=\"color: black;\">:</span><span style=\"color: mediumblue;\">&nbsp;15px</span><span style=\"color: black;\">;</span></p><p><span style=\"color: black;\">}</span></p><p><br></p><p><span style=\"color: brown;\">button&nbsp;</span><span style=\"color: black;\">{</span></p><p><span style=\"color: red;\">&nbsp;background-color</span><span style=\"color: black;\">:</span><span style=\"color: mediumblue;\">&nbsp;#ffffff</span><span style=\"color: black;\">;</span></p><p><span style=\"color: red;\">&nbsp;color</span><span style=\"color: black;\">:</span><span style=\"color: mediumblue;\">&nbsp;#1e90ff</span><span style=\"color: black;\">;</span></p><p><span style=\"color: red;\">&nbsp;border</span><span style=\"color: black;\">:</span><span style=\"color: mediumblue;\">&nbsp;1px solid #1e90ff</span><span style=\"color: black;\">;</span></p><p><span style=\"color: red;\">&nbsp;padding</span><span style=\"color: black;\">:</span><span style=\"color: mediumblue;\">&nbsp;5px</span><span style=\"color: black;\">;</span></p><p><span style=\"color: black;\">}</span></p><p><a href=\"https://www.w3schools.com/css/tryit.asp?filename=trycss3_var_old\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"background-color: rgb(76, 175, 80); color: rgb(255, 255, 255);\">Try it Yourself »</a></p><h2>Syntax of the var() Function</h2><p>The&nbsp;<code style=\"color: crimson; background-color: rgba(222, 222, 222, 0.3);\">var()</code>&nbsp;function is used to insert the value of a CSS variable.</p><p>The syntax of the&nbsp;<code style=\"color: crimson; background-color: rgba(222, 222, 222, 0.3);\">var()</code>&nbsp;function is as follows:</p><p>var(--<em>name, value</em>)</p><p>ValueDescription<em>name</em>Required. The variable name (must start with two dashes)<em>value</em>Optional. The fallback value (used if the variable is not found)</p><p><strong>Note:</strong>&nbsp;The variable name must begin with two dashes (--) and it is case sensitive!</p><p class=\"ql-align-center\">ADVERTISEMENT</p><p class=\"ql-align-center\"><br></p><h2>How var() Works</h2><p>First of all: CSS variables can have a global or local scope.</p><p>Global variables can be accessed/used through the entire document, while local variables can be used only inside the selector where it is declared.</p><p>To create a variable with global scope, declare it inside the&nbsp;<code style=\"color: crimson; background-color: rgba(222, 222, 222, 0.3);\">:root</code>&nbsp;selector. The&nbsp;<code style=\"background-color: transparent; color: inherit;\"><a href=\"https://www.w3schools.com/cssref/sel_root.asp\" rel=\"noopener noreferrer\" target=\"_blank\">:root</a></code>&nbsp;selector matches the document's root element.</p><p>To create a variable with local scope, declare it inside the selector that is going to use it.</p><p>The following example is equal to the example above, but here we use the&nbsp;<code style=\"color: crimson; background-color: rgba(222, 222, 222, 0.3);\">var()</code>&nbsp;function.</p><p>First, we declare two global variables (--blue and --white). Then, we use the&nbsp;<code style=\"color: crimson; background-color: rgba(222, 222, 222, 0.3);\">var()</code>&nbsp;function to insert the value of the variables later in the style sheet:</p><h3>Example</h3><p><span style=\"color: brown;\">:root&nbsp;</span><span style=\"color: black;\">{</span></p><p><span style=\"color: red;\">&nbsp;--blue</span><span style=\"color: black;\">:</span><span style=\"color: mediumblue;\">&nbsp;#1e90ff</span><span style=\"color: black;\">;</span></p><p><span style=\"color: red;\">&nbsp;--white</span><span style=\"color: black;\">:</span><span style=\"color: mediumblue;\">&nbsp;#ffffff</span><span style=\"color: black;\">;</span></p><p><span style=\"color: black;\">}</span></p><p><br></p><p><span style=\"color: brown;\">body&nbsp;</span><span style=\"color: black;\">{</span><span style=\"color: red;\">&nbsp;background-color</span><span style=\"color: black;\">:</span><span style=\"color: mediumblue;\">&nbsp;var(--blue)</span><span style=\"color: black;\">;</span><span style=\"color: red;\">&nbsp;</span><span style=\"color: black;\">}</span></p><p><br></p><p><span style=\"color: brown;\">h2&nbsp;</span><span style=\"color: black;\">{</span><span style=\"color: red;\">&nbsp;border-bottom</span><span style=\"color: black;\">:</span><span style=\"color: mediumblue;\">&nbsp;2px solid var(--blue)</span><span style=\"color: black;\">;</span><span style=\"color: red;\">&nbsp;</span><span style=\"color: black;\">}</span></p><p><br></p><p><span style=\"color: brown;\">.container&nbsp;</span><span style=\"color: black;\">{</span></p><p><span style=\"color: red;\">&nbsp;color</span><span style=\"color: black;\">:</span><span style=\"color: mediumblue;\">&nbsp;var(--blue)</span><span style=\"color: black;\">;</span></p><p><span style=\"color: red;\">&nbsp;background-color</span><span style=\"color: black;\">:</span><span style=\"color: mediumblue;\">&nbsp;var(--white)</span><span style=\"color: black;\">;</span></p><p><span style=\"color: red;\">&nbsp;padding</span><span style=\"color: black;\">:</span><span style=\"color: mediumblue;\">&nbsp;15px</span><span style=\"color: black;\">;</span></p><p><span style=\"color: black;\">}</span></p><p><br></p><p><span style=\"color: brown;\">button&nbsp;</span><span style=\"color: black;\">{</span></p><p><span style=\"color: red;\">&nbsp;background-color</span><span style=\"color: black;\">:</span><span style=\"color: mediumblue;\">&nbsp;var(--white)</span><span style=\"color: black;\">;</span></p><p><span style=\"color: red;\">&nbsp;color</span><span style=\"color: black;\">:</span><span style=\"color: mediumblue;\">&nbsp;var(--blue)</span><span style=\"color: black;\">;</span></p><p><span style=\"color: red;\">&nbsp;border</span><span style=\"color: black;\">:</span><span style=\"color: mediumblue;\">&nbsp;1px solid var(--blue)</span><span style=\"color: black;\">;</span></p><p><span style=\"color: red;\">&nbsp;padding</span><span style=\"color: black;\">:</span><span style=\"color: mediumblue;\">&nbsp;5px</span><span style=\"color: black;\">;</span></p><p><span style=\"color: black;\">}</span></p><p><a href=\"https://www.w3schools.com/css/tryit.asp?filename=trycss3_var\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"background-color: rgb(76, 175, 80); color: rgb(255, 255, 255);\">Try it Yourself »</a></p><p>Advantages of using var() are:</p><p><br></p><ul><li>makes the code easier to read (more understandable)</li><li>makes it much easier to change the color values</li></ul><p>To change the blue and white color to a softer blue and white, you just need to change the two variable values:</p><h3>Example</h3><p><span style=\"color: brown;\">:root&nbsp;</span><span style=\"color: black;\">{</span></p><p><span style=\"color: red;\">&nbsp;--blue</span><span style=\"color: black;\">:</span><span style=\"color: mediumblue;\">&nbsp;#6495ed</span><span style=\"color: black;\">;</span></p><p><span style=\"color: red;\">&nbsp;--white</span><span style=\"color: black;\">:</span><span style=\"color: mediumblue;\">&nbsp;#faf0e6</span><span style=\"color: black;\">;</span></p><p><span style=\"color: black;\">}</span></p><p><br></p><p><span style=\"color: brown;\">body&nbsp;</span><span style=\"color: black;\">{</span><span style=\"color: red;\">&nbsp;background-color</span><span style=\"color: black;\">:</span><span style=\"color: mediumblue;\">&nbsp;var(--blue)</span><span style=\"color: black;\">;</span><span style=\"color: red;\">&nbsp;</span><span style=\"color: black;\">}</span></p><p><br></p><p><span style=\"color: brown;\">h2&nbsp;</span><span style=\"color: black;\">{</span><span style=\"color: red;\">&nbsp;border-bottom</span><span style=\"color: black;\">:</span><span style=\"color: mediumblue;\">&nbsp;2px solid var(--blue)</span><span style=\"color: black;\">;</span><span style=\"color: red;\">&nbsp;</span><span style=\"color: black;\">}</span></p><p><br></p><p><span style=\"color: brown;\">.container&nbsp;</span><span style=\"color: black;\">{</span></p><p><span style=\"color: red;\">&nbsp;color</span><span style=\"color: black;\">:</span><span style=\"color: mediumblue;\">&nbsp;var(--blue)</span><span style=\"color: black;\">;</span></p><p><span style=\"color: red;\">&nbsp;background-color</span><span style=\"color: black;\">:</span><span style=\"color: mediumblue;\">&nbsp;var(--white)</span><span style=\"color: black;\">;</span></p><p><span style=\"color: red;\">&nbsp;padding</span><span style=\"color: black;\">:</span><span style=\"color: mediumblue;\">&nbsp;15px</span><span style=\"color: black;\">;</span></p><p><span style=\"color: black;\">}</span></p><p><br></p><p><span style=\"color: brown;\">button&nbsp;</span><span style=\"color: black;\">{</span></p><p><span style=\"color: red;\">&nbsp;background-color</span><span style=\"color: black;\">:</span><span style=\"color: mediumblue;\">&nbsp;var(--white)</span><span style=\"color: black;\">;</span></p><p><span style=\"color: red;\">&nbsp;color</span><span style=\"color: black;\">:</span><span style=\"color: mediumblue;\">&nbsp;var(--blue)</span><span style=\"color: black;\">;</span></p><p><span style=\"color: red;\">&nbsp;border</span><span style=\"color: black;\">:</span><span style=\"color: mediumblue;\">&nbsp;1px solid var(--blue)</span><span style=\"color: black;\">;</span></p><p><span style=\"color: red;\">&nbsp;padding</span><span style=\"color: black;\">:</span><span style=\"color: mediumblue;\">&nbsp;5px</span><span style=\"color: black;\">;</span></p><p><span style=\"color: black;\">}</span></p><p><a href=\"https://www.w3schools.com/css/tryit.asp?filename=trycss3_var2\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"background-color: rgb(76, 175, 80); color: rgb(255, 255, 255);\">Try it Yourself »</a></p><h2>Browser Support</h2><p>The numbers in the table specify the first browser version that fully supports the&nbsp;<code style=\"color: crimson; background-color: rgba(222, 222, 222, 0.3);\">var()</code>&nbsp;function.</p><p>Functionvar()49.015.031.09.136.0</p>"
    }
]